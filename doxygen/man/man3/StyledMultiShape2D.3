.TH "StyledMultiShape2D" 3 "Thu Jul 1 2021" "Version 1.0" "Grail" \" -*- nroff -*-
.ad l
.nh
.SH NAME
StyledMultiShape2D
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBMultiShape2D\fP, and \fBMultiShape2D\fP\&.
.PP
Inherited by \fBScrollbarWidget\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStyledMultiShape2D\fP (\fBCanvas\fP *parent, const \fBStyle\fP *s, float angle=0, float x=0, float y=0, uint32_t vertCount=1024, uint32_t solidIndCount=1024, uint32_t lineIndCount=1024, uint32_t pointIndCount=1024)"
.br
.ti -1c
.RI "uint32_t \fBaddSector\fP (float x, float y, float xRad, float yRad, float fromAngle, float toAngle, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBaddColor\fP (const glm::vec4 &rgb)"
.br
.ti -1c
.RI "void \fBaddColor\fP (float r, float g, float b)"
.br
.ti -1c
.RI "void \fBsetColors\fP (float cols[], uint32_t size)"
.br
.ti -1c
.RI "void \fBsetColors\fP (std::vector< float > &cols)"
.br
.ti -1c
.RI "void \fBaddStyledPoint\fP (float x, float y, const glm::vec4 &rgb)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP () override"
.br
.ti -1c
.RI "void \fBrender\fP () override"
.br
.ti -1c
.RI "void \fBupdateColors\fP (const uint64_t pos, const float r, const float g, const float b)"
.br
.ti -1c
.RI "void \fBupdatePoints\fP ()"
.br
.ti -1c
.RI "void \fBupdateIndices\fP ()"
.br
.ti -1c
.RI "void \fBfillRectangle\fP (float x, float y, float w, float h, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillRoundRect\fP (float x, float y, float w, float h, float rx, float ry, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillTriangle\fP (float x1, float y1, float x2, float y2, float x3, float y3, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillPolygon\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillCircle\fP (float x, float y, float rad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillEllipse\fP (float x, float y, float xRad, float yRad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawRectangle\fP (float x, float y, float w, float h, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawRoundRect\fP (float x, float y, float w, float h, float rx, float ry, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawTriangle\fP (float x1, float y1, float x2, float y2, float x3, float y3, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolygon\fP (const std::vector< float > &v, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolygon\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawCompletePolygon\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawCircle\fP (float x, float y, float rad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawEllipse\fP (float x, float y, float xRad, float yRad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawLine\fP (float x1, float y1, float x2, float y2, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolyline\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillPolyline\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolygon\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillPolygon\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBbezierSegment\fP (const \fBBezier\fP *b)"
.br
.ti -1c
.RI "void \fBbezierSegmentByPoints\fP (float p1x, float p1y, float p2x, float p2y, float p3x, float p3y, float p4x, float p4y, int n, bool end, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBspline\fP (const std::vector< double > &points, int n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawGrid\fP (float x0, float y0, float w, float h, uint32_t numHoriz, uint32_t numVert, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillGrid\fP (float x0, float y0, float w, float h, uint32_t numHoriz, uint32_t numVert, const glm::vec4 &lc, const glm::vec4 &bc)"
.br
.ti -1c
.RI "void \fBdrawTriGrid\fP (float x, float y, float s, uint32_t trianglesPerSide, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawHexGrid\fP (float x, float y, float w, float h, uint32_t numHorizHexagons, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBrectanglePoints\fP (float x, float y, float w, float h, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBroundRectPoints\fP (float x, float y, float w, float h, float rx, float ry, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBtrianglePoints\fP (float x1, float y1, float x2, float y2, float x3, float y3, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBpolygonPoints\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBcirclePoints\fP (float x, float y, float rad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBellipsePoints\fP (float x, float y, float xRad, float yRad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdump\fP ()"
.br
.ti -1c
.RI "\fBStyledMultiShape2D\fP (\fBCanvas\fP *parent, const \fBStyle\fP *s, float angle=0, float x=0, float y=0, uint32_t vertCount=1024, uint32_t solidIndCount=1024, uint32_t lineIndCount=1024, uint32_t pointIndCount=1024)"
.br
.ti -1c
.RI "uint32_t \fBaddSector\fP (float x, float y, float xRad, float yRad, float fromAngle, float toAngle, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBaddColor\fP (const glm::vec4 &rgb)"
.br
.ti -1c
.RI "void \fBaddColor\fP (float r, float g, float b)"
.br
.ti -1c
.RI "void \fBsetColors\fP (float cols[], uint32_t size)"
.br
.ti -1c
.RI "void \fBsetColors\fP (std::vector< float > &cols)"
.br
.ti -1c
.RI "void \fBaddStyledPoint\fP (float x, float y, const glm::vec4 &rgb)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP () override"
.br
.ti -1c
.RI "void \fBrender\fP () override"
.br
.ti -1c
.RI "void \fBupdateColors\fP (const uint64_t pos, const float r, const float g, const float b)"
.br
.ti -1c
.RI "void \fBupdatePoints\fP ()"
.br
.ti -1c
.RI "void \fBupdateIndices\fP ()"
.br
.ti -1c
.RI "void \fBfillRectangle\fP (float x, float y, float w, float h, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillRoundRect\fP (float x, float y, float w, float h, float rx, float ry, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillTriangle\fP (float x1, float y1, float x2, float y2, float x3, float y3, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillPolygon\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillCircle\fP (float x, float y, float rad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillEllipse\fP (float x, float y, float xRad, float yRad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawRectangle\fP (float x, float y, float w, float h, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawRoundRect\fP (float x, float y, float w, float h, float rx, float ry, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawTriangle\fP (float x1, float y1, float x2, float y2, float x3, float y3, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolygon\fP (const std::vector< float > &v, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolygon\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawCompletePolygon\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawCircle\fP (float x, float y, float rad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawEllipse\fP (float x, float y, float xRad, float yRad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawLine\fP (float x1, float y1, float x2, float y2, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolyline\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillPolyline\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawPolygon\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillPolygon\fP (const float xy[], uint32_t n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBbezierSegment\fP (const \fBBezier\fP *b)"
.br
.ti -1c
.RI "void \fBbezierSegmentByPoints\fP (float p1x, float p1y, float p2x, float p2y, float p3x, float p3y, float p4x, float p4y, int n, bool end, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBspline\fP (const std::vector< double > &points, int n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawGrid\fP (float x0, float y0, float w, float h, uint32_t numHoriz, uint32_t numVert, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBfillGrid\fP (float x0, float y0, float w, float h, uint32_t numHoriz, uint32_t numVert, const glm::vec4 &lc, const glm::vec4 &bc)"
.br
.ti -1c
.RI "void \fBdrawTriGrid\fP (float x, float y, float s, uint32_t trianglesPerSide, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawHexGrid\fP (float x, float y, float w, float h, uint32_t numHorizHexagons, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdrawCircleMarker\fP (float x, float y, float size, glm::vec4 &color)"
.br
.ti -1c
.RI "void \fBdrawTriangleMarker\fP (float x, float y, float size, glm::vec4 &color)"
.br
.ti -1c
.RI "void \fBdrawSquareMarker\fP (float x, float y, float size, glm::vec4 &color)"
.br
.ti -1c
.RI "void \fBdrawPentagonMarker\fP (float x, float y, float size, glm::vec4 &color)"
.br
.ti -1c
.RI "void \fBdrawHexagonMarker\fP (float x, float y, float size, glm::vec4 &color)"
.br
.ti -1c
.RI "void \fBdrawCrossMarker\fP (float x, float y, float size, glm::vec4 &color)"
.br
.ti -1c
.RI "void \fBrectanglePoints\fP (float x, float y, float w, float h, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBroundRectPoints\fP (float x, float y, float w, float h, float rx, float ry, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBtrianglePoints\fP (float x1, float y1, float x2, float y2, float x3, float y3, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBpolygonPoints\fP (float x, float y, float xRad, float yRad, float n, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBcirclePoints\fP (float x, float y, float rad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBellipsePoints\fP (float x, float y, float xRad, float yRad, float angleInc, const glm::vec4 &c)"
.br
.ti -1c
.RI "void \fBdump\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"


.SH "Author"
.PP 
Generated automatically by Doxygen for Grail from the source code\&.
